generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  // Regular user details
  supabaseUserId String  @unique
  username       String? @unique
  name           String?
  avatar         String?

  initialized  Boolean @default(false)
  userObjectId String? @unique // SUI user object id

  participants Participant[]

  ownedSeeds  Seed[] @relation("owner")
  issuedSeeds Seed[] @relation("issuer")

  wallet Wallet? @relation(fields: [walletId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  walletId  String?
  Channel   Channel[]

  @@index(fields: [createdAt])
  @@map("users")
}

model Wallet {
  id String @id @default(cuid())

  mnemonic  String @unique
  publicKey String @unique

  balance Float @default(0)

  user User[]

  @@map("wallets")
}

model Seed {
  id    String @id @default(cuid())
  index Int // goes from 0 - 150

  issuer   User   @relation(fields: [issuerId], references: [id], name: "issuer")
  issuerId String

  owner   User   @relation(fields: [ownerId], references: [id], name: "owner")
  ownerId String

  @@index(fields: [issuerId, index])
  @@map("seeds")
}

// Participant is a user in a channel
model Participant {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([channelId, userId])
  @@map("participants")
}

model Channel {
  id String @id @default(cuid())

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  participants Participant[]

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("channels")
}
